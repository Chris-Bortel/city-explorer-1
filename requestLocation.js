{
  _readableState: ReadableState {
    objectMode: false,
      highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
    length: 0,
      pipes: [],
        flowing: null,
          ended: false,
            endEmitted: false,
              reading: false,
                sync: true,
                  needReadable: false,
                    emittedReadable: false,
                      readableListening: false,
                        resumeScheduled: false,
                          errorEmitted: false,
                            emitClose: true,
                              autoDestroy: false,
                                destroyed: false,
                                  errored: false,
                                    closed: false,
                                      closeEmitted: false,
                                        defaultEncoding: 'utf8',
                                          awaitDrainWriters: null,
                                            multiAwaitDrain: false,
                                              readingMore: true,
                                                decoder: null,
                                                  encoding: null,
                                                    [Symbol(kPaused)]: null
  },
  _events: [Object: null prototype] { },
  _eventsCount: 0,
    _maxListeners: undefined,
      socket: <ref * 1 > Socket {
    connecting: false,
      _hadError: false,
        _parent: null,
          _host: null,
            _readableState: ReadableState {
      objectMode: false,
        highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
        pipes: [],
          flowing: true,
            ended: false,
              endEmitted: false,
                reading: true,
                  sync: false,
                    needReadable: true,
                      emittedReadable: false,
                        readableListening: false,
                          resumeScheduled: false,
                            errorEmitted: false,
                              emitClose: false,
                                autoDestroy: false,
                                  destroyed: false,
                                    errored: false,
                                      closed: false,
                                        closeEmitted: false,
                                          defaultEncoding: 'utf8',
                                            awaitDrainWriters: null,
                                              multiAwaitDrain: false,
                                                readingMore: false,
                                                  decoder: null,
                                                    encoding: null,
                                                      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [Array],
        timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
            error: [Function: socketOnError],
              close: [Array],
                drain: [Function: bound socketOnDrain],
                  resume: [Function: onSocketResume],
                    pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
      _maxListeners: undefined,
        _writableState: WritableState {
      objectMode: false,
        highWaterMark: 16384,
          finalCalled: false,
            needDrain: false,
              ending: false,
                ended: false,
                  finished: false,
                    destroyed: false,
                      decodeStrings: false,
                        defaultEncoding: 'utf8',
                          length: 0,
                            writing: false,
                              corked: 0,
                                sync: true,
                                  bufferProcessing: false,
                                    onwrite: [Function: bound onwrite],
                                      writecb: null,
                                        writelen: 0,
                                          afterWriteTickInfo: null,
                                            buffered: [],
                                              bufferedIndex: 0,
                                                allBuffers: true,
                                                  allNoop: true,
                                                    pendingcb: 0,
                                                      prefinished: false,
                                                        errorEmitted: false,
                                                          emitClose: false,
                                                            autoDestroy: false,
                                                              errored: false,
                                                                closed: false
    },
    allowHalfOpen: true,
      _sockname: null,
        _pendingData: null,
          _pendingEncoding: '',
            server: Server {
      maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
          _events: [Object: null prototype],
            _eventsCount: 2,
              _maxListeners: undefined,
                _connections: 1,
                  _handle: [TCP],
                    _usingWorkers: false,
                      _workers: [],
                        _unref: false,
                          allowHalfOpen: true,
                            pauseOnConnect: false,
                              httpAllowHalfOpen: false,
                                timeout: 0,
                                  keepAliveTimeout: 5000,
                                    maxHeadersCount: null,
                                      headersTimeout: 60000,
                                        _connectionKey: '6::::3000',
                                          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
                                            [Symbol(ServerResponse)]: [Function: ServerResponse],
                                              [Symbol(kCapture)]: false,
                                                [Symbol(asyncId)]: 5
    },
    _server: Server {
      maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
          _events: [Object: null prototype],
            _eventsCount: 2,
              _maxListeners: undefined,
                _connections: 1,
                  _handle: [TCP],
                    _usingWorkers: false,
                      _workers: [],
                        _unref: false,
                          allowHalfOpen: true,
                            pauseOnConnect: false,
                              httpAllowHalfOpen: false,
                                timeout: 0,
                                  keepAliveTimeout: 5000,
                                    maxHeadersCount: null,
                                      headersTimeout: 60000,
                                        _connectionKey: '6::::3000',
                                          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
                                            [Symbol(ServerResponse)]: [Function: ServerResponse],
                                              [Symbol(kCapture)]: false,
                                                [Symbol(asyncId)]: 5
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
          '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
                '5': [Function: bound onParserTimeout],
                  _headers: [],
                    _url: '',
                      socket: [Circular * 1],
                        incoming: [Circular * 2],
                          outgoing: null,
                            maxHeaderPairs: 2000,
                              _consumed: true,
                                onIncoming: [Function: bound parserOnIncoming]
    },
    on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
          _paused: false,
            _httpMessage: ServerResponse {
      _events: [Object: null prototype],
        _eventsCount: 1,
          _maxListeners: undefined,
            outputData: [],
              outputSize: 0,
                writable: true,
                  destroyed: false,
                    _last: false,
                      chunkedEncoding: false,
                        shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                            sendDate: true,
                              _removedConnection: false,
                                _removedContLen: false,
                                  _removedTE: false,
                                    _contentLength: null,
                                      _hasBody: true,
                                        _trailer: '',
                                          finished: false,
                                            _headerSent: false,
                                              socket: [Circular * 1],
                                                _header: null,
                                                  _onPendingData: [Function: bound updateOutgoingData],
                                                    _sent100: false,
                                                      _expect_continue: false,
                                                        req: [Circular * 2],
                                                          locals: [Object: null prototype] { },
      [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
            [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    [Symbol(asyncId)]: 9,
      [Symbol(kHandle)]: TCP {
      reading: true,
        onconnection: null,
          _consumed: true,
            [Symbol(owner)]: [Circular * 1]
    },
    [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                  [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
    httpVersionMinor: 1,
      httpVersion: '1.1',
        complete: false,
          headers: {
    host: 'localhost:3000',
      connection: 'keep-alive',
        accept: '*/*',
          'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
            dnt: '1',
              origin: 'https://codefellows.github.io',
                'sec-fetch-site': 'cross-site',
                  'sec-fetch-mode': 'cors',
                    'sec-fetch-dest': 'empty',
                      'accept-encoding': 'gzip, deflate, br',
                        'accept-language': 'en-US,en;q=0.9',
                          'if-none-match': 'W/"83-k9TJLxAoQQzfuP2W5Avu1NAOyRo"'
  },
  rawHeaders: [
    'Host',
    'localhost:3000',
    'Connection',
    'keep-alive',
    'Accept',
    '*/*',
    'User-Agent',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
    'DNT',
    '1',
    'Origin',
    'https://codefellows.github.io',
    'Sec-Fetch-Site',
    'cross-site',
    'Sec-Fetch-Mode',
    'cors',
    'Sec-Fetch-Dest',
    'empty',
    'Accept-Encoding',
    'gzip, deflate, br',
    'Accept-Language',
    'en-US,en;q=0.9',
    'If-None-Match',
    'W/"83-k9TJLxAoQQzfuP2W5Avu1NAOyRo"'
  ],
    trailers: { },
  rawTrailers: [],
    aborted: false,
      upgrade: false,
        url: '/location?city=houston',
          method: 'GET',
            statusCode: null,
              statusMessage: null,
                client: <ref * 1 > Socket {
    connecting: false,
      _hadError: false,
        _parent: null,
          _host: null,
            _readableState: ReadableState {
      objectMode: false,
        highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
        pipes: [],
          flowing: true,
            ended: false,
              endEmitted: false,
                reading: true,
                  sync: false,
                    needReadable: true,
                      emittedReadable: false,
                        readableListening: false,
                          resumeScheduled: false,
                            errorEmitted: false,
                              emitClose: false,
                                autoDestroy: false,
                                  destroyed: false,
                                    errored: false,
                                      closed: false,
                                        closeEmitted: false,
                                          defaultEncoding: 'utf8',
                                            awaitDrainWriters: null,
                                              multiAwaitDrain: false,
                                                readingMore: false,
                                                  decoder: null,
                                                    encoding: null,
                                                      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [Array],
        timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
            error: [Function: socketOnError],
              close: [Array],
                drain: [Function: bound socketOnDrain],
                  resume: [Function: onSocketResume],
                    pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
      _maxListeners: undefined,
        _writableState: WritableState {
      objectMode: false,
        highWaterMark: 16384,
          finalCalled: false,
            needDrain: false,
              ending: false,
                ended: false,
                  finished: false,
                    destroyed: false,
                      decodeStrings: false,
                        defaultEncoding: 'utf8',
                          length: 0,
                            writing: false,
                              corked: 0,
                                sync: true,
                                  bufferProcessing: false,
                                    onwrite: [Function: bound onwrite],
                                      writecb: null,
                                        writelen: 0,
                                          afterWriteTickInfo: null,
                                            buffered: [],
                                              bufferedIndex: 0,
                                                allBuffers: true,
                                                  allNoop: true,
                                                    pendingcb: 0,
                                                      prefinished: false,
                                                        errorEmitted: false,
                                                          emitClose: false,
                                                            autoDestroy: false,
                                                              errored: false,
                                                                closed: false
    },
    allowHalfOpen: true,
      _sockname: null,
        _pendingData: null,
          _pendingEncoding: '',
            server: Server {
      maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
          _events: [Object: null prototype],
            _eventsCount: 2,
              _maxListeners: undefined,
                _connections: 1,
                  _handle: [TCP],
                    _usingWorkers: false,
                      _workers: [],
                        _unref: false,
                          allowHalfOpen: true,
                            pauseOnConnect: false,
                              httpAllowHalfOpen: false,
                                timeout: 0,
                                  keepAliveTimeout: 5000,
                                    maxHeadersCount: null,
                                      headersTimeout: 60000,
                                        _connectionKey: '6::::3000',
                                          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
                                            [Symbol(ServerResponse)]: [Function: ServerResponse],
                                              [Symbol(kCapture)]: false,
                                                [Symbol(asyncId)]: 5
    },
    _server: Server {
      maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
          _events: [Object: null prototype],
            _eventsCount: 2,
              _maxListeners: undefined,
                _connections: 1,
                  _handle: [TCP],
                    _usingWorkers: false,
                      _workers: [],
                        _unref: false,
                          allowHalfOpen: true,
                            pauseOnConnect: false,
                              httpAllowHalfOpen: false,
                                timeout: 0,
                                  keepAliveTimeout: 5000,
                                    maxHeadersCount: null,
                                      headersTimeout: 60000,
                                        _connectionKey: '6::::3000',
                                          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
                                            [Symbol(ServerResponse)]: [Function: ServerResponse],
                                              [Symbol(kCapture)]: false,
                                                [Symbol(asyncId)]: 5
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
          '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
                '5': [Function: bound onParserTimeout],
                  _headers: [],
                    _url: '',
                      socket: [Circular * 1],
                        incoming: [Circular * 2],
                          outgoing: null,
                            maxHeaderPairs: 2000,
                              _consumed: true,
                                onIncoming: [Function: bound parserOnIncoming]
    },
    on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
          _paused: false,
            _httpMessage: ServerResponse {
      _events: [Object: null prototype],
        _eventsCount: 1,
          _maxListeners: undefined,
            outputData: [],
              outputSize: 0,
                writable: true,
                  destroyed: false,
                    _last: false,
                      chunkedEncoding: false,
                        shouldKeepAlive: true,
                          useChunkedEncodingByDefault: true,
                            sendDate: true,
                              _removedConnection: false,
                                _removedContLen: false,
                                  _removedTE: false,
                                    _contentLength: null,
                                      _hasBody: true,
                                        _trailer: '',
                                          finished: false,
                                            _headerSent: false,
                                              socket: [Circular * 1],
                                                _header: null,
                                                  _onPendingData: [Function: bound updateOutgoingData],
                                                    _sent100: false,
                                                      _expect_continue: false,
                                                        req: [Circular * 2],
                                                          locals: [Object: null prototype] { },
      [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
            [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    [Symbol(asyncId)]: 9,
      [Symbol(kHandle)]: TCP {
      reading: true,
        onconnection: null,
          _consumed: true,
            [Symbol(owner)]: [Circular * 1]
    },
    [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                  [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
  },
  _consuming: false,
    _dumped: false,
      next: [Function: next],
        baseUrl: '',
          originalUrl: '/location?city=houston',
            _parsedUrl: Url {
    protocol: null,
      slashes: null,
        auth: null,
          host: null,
            port: null,
              hostname: null,
                hash: null,
                  search: '?city=houston',
                    query: 'city=houston',
                      pathname: '/location',
                        path: '/location?city=houston',
                          href: '/location?city=houston',
                            _raw: '/location?city=houston'
  },
  params: { },
  query: { city: 'houston' },
  res: <ref * 3 > ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
      _maxListeners: undefined,
        outputData: [],
          outputSize: 0,
            writable: true,
              destroyed: false,
                _last: false,
                  chunkedEncoding: false,
                    shouldKeepAlive: true,
                      useChunkedEncodingByDefault: true,
                        sendDate: true,
                          _removedConnection: false,
                            _removedContLen: false,
                              _removedTE: false,
                                _contentLength: null,
                                  _hasBody: true,
                                    _trailer: '',
                                      finished: false,
                                        _headerSent: false,
                                          socket: <ref * 1 > Socket {
      connecting: false,
        _hadError: false,
          _parent: null,
            _host: null,
              _readableState: [ReadableState],
                _events: [Object: null prototype],
                  _eventsCount: 8,
                    _maxListeners: undefined,
                      _writableState: [WritableState],
                        allowHalfOpen: true,
                          _sockname: null,
                            _pendingData: null,
                              _pendingEncoding: '',
                                server: [Server],
                                  _server: [Server],
                                    parser: [HTTPParser],
                                      on: [Function: socketListenerWrap],
                                        addListener: [Function: socketListenerWrap],
                                          prependListener: [Function: socketListenerWrap],
                                            _paused: false,
                                              _httpMessage: [Circular * 3],
                                                [Symbol(asyncId)]: 9,
                                                  [Symbol(kHandle)]: [TCP],
                                                    [Symbol(kSetNoDelay)]: false,
                                                      [Symbol(lastWriteQueueSize)]: 0,
                                                        [Symbol(timeout)]: null,
                                                          [Symbol(kBuffer)]: null,
                                                            [Symbol(kBufferCb)]: null,
                                                              [Symbol(kBufferGen)]: null,
                                                                [Symbol(kCapture)]: false,
                                                                  [Symbol(kBytesRead)]: 0,
                                                                    [Symbol(kBytesWritten)]: 0
    },
    _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
          _expect_continue: false,
            req: [Circular * 2],
              locals: [Object: null prototype] { },
    [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
        'access-control-allow-origin': [Array]
    }
  },
  route: Route {
    path: '/location',
      stack: [[Layer]],
        methods: { get: true }
  },
  [Symbol(kCapture)]: false
}